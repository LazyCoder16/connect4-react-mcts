{"version":3,"sources":["components/Navbar.js","components/Box.js","Connect4Board.js","mcts/Node.js","mcts/mcts.js","components/Board.js","components/RulesAndAbout.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","id","href","to","Box","onClick","color","style","backgroundColor","Connect4Board","board","next_to_move","Y","doMove","a","JSON","parse","stringify","i","ROWS","R","check4x4","x","y","sum","sym","j","checkDone","COLS","c","getPossibleMoves","moves","push","this","Array","fill","Node","parent","is_fully_expanded","moves_left","length","is_terminal_node","rollout","cur_board","Math","floor","random","bestChild","best_child","c_param","C","max_val","Infinity","children","q","n","b","sqrt","log","val","expand","pop","new_node","backprop","res","results","getProbs","probs","treePolicy","root","cur_node","mcts","n_simulations","v","Board","state","info","done","awaiting","colors","1","0","renderBox","handleClick","renderRow","row","map","key","reset","setState","window","setTimeout","updateInfo","textAlign","marginTop","Component","RulesAndAbout","fontWeight","App","basename","process","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74355ea7.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper\" id=\"nav\">\r\n        <a href=\"#\" className=\"brand-logo\">Connect 4 vs AI</a>\r\n        <ul className=\"right\">\r\n          <li><NavLink to=\"/\">Home</NavLink></li>\r\n          <li><NavLink to=\"/rules-and-about\">Rules and About</NavLink></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Box({onClick, color}) {\r\n  return (\r\n    <div className=\"box\" onClick={onClick}>\r\n      { color !== null &&\r\n        <div className=\"coin\" style={{backgroundColor: color}}></div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import { Y, R, ROWS, COLS } from './mcts/constants.json';\r\n\r\nclass Connect4Board {\r\n  constructor(board=null, next_to_move=Y) {\r\n    if(board === null) this.board = Array(ROWS).fill(Array(COLS).fill(0));\r\n    else this.board = board;\r\n    this.next_to_move = next_to_move;\r\n  }\r\n\r\n  doMove = (a) => {\r\n    let board = JSON.parse(JSON.stringify(this.board));\r\n    for(let i=ROWS-1; i>=0; --i) {\r\n      if(board[i][a] === 0) {\r\n        board[i][a] = this.next_to_move;\r\n        break;\r\n      }\r\n    }\r\n    let next_to_move = (this.next_to_move === Y) ? R : Y;\r\n    let new_board = new Connect4Board(board, next_to_move);\r\n    return new_board;\r\n  }\r\n\r\n  check4x4 = (x, y) => {\r\n    let sum = 0;\r\n    for(const sym of [Y, R]) {\r\n      for(let i=0; i<4; ++i) {\r\n        sum = 0;\r\n        for(let j=0; j<4; ++j) sum += this.board[x+i][y+j];\r\n        if(sum === sym * 4) return sym;\r\n        \r\n        sum = 0;\r\n        for(let j=0; j<4; ++j) sum += this.board[x+j][y+i];\r\n        if(sum === sym * 4) return sym;\r\n      }\r\n\r\n      sum = 0;\r\n      for(let i=0; i<4; ++i) sum += this.board[x+i][y+i];\r\n      if(sum === sym * 4) return sym;\r\n\r\n      sum = 0;\r\n      for(let i=0; i<4; ++i) sum += this.board[x+i][y+3-i];\r\n      if(sum === sym * 4) return sym;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  checkDone = () => {\r\n    for(let i=0; i<=ROWS-4; ++i) {\r\n      for(let j=0; j<=COLS-4; ++j) {\r\n        let c = this.check4x4(i, j);\r\n        if(c !== 0) return c;\r\n      }\r\n    }\r\n    for(let i=0; i<ROWS; ++i)\r\n      for(let j=0; j<COLS; ++j)\r\n        if(this.board[i][j] === 0)\r\n          return 0;\r\n    return 2;\r\n  }\r\n\r\n  getPossibleMoves = () => {\r\n    let moves = [];\r\n    for(let j=0; j<COLS; ++j)\r\n      if(this.board[0][j] === 0)\r\n        moves.push(j);\r\n    return moves;\r\n  }\r\n}\r\n\r\nexport default Connect4Board;","import Connect4Board from '../Connect4Board';\r\nimport { Y, R, C } from './constants.json';\r\n\r\nclass Node {\r\n  constructor(board=null, parent=null) {\r\n    if(board === null) this.board = new Connect4Board();\r\n    else this.board = board;\r\n    this.parent = parent;\r\n    this.n = 0;\r\n    this.results = { [Y]: 0, [R]: 0, 2: 0 };\r\n    this.children = [];\r\n    this.moves_left = this.board.getPossibleMoves();\r\n  }\r\n\r\n  get q() {\r\n    let wins = this.results[this.parent.board.next_to_move];\r\n    let loses = this.results[-this.parent.board.next_to_move];\r\n    return (wins - loses);\r\n  }\r\n\r\n  is_fully_expanded = () => {\r\n    return (this.moves_left.length === 0);\r\n  }\r\n\r\n  is_terminal_node = () => {\r\n    return (this.board.checkDone() !== 0);\r\n  }\r\n\r\n  rollout = () => {\r\n    let cur_board = new Connect4Board(JSON.parse(JSON.stringify(this.board.board)), this.board.next_to_move);\r\n    while(cur_board.checkDone() === 0) {\r\n      let moves = cur_board.getPossibleMoves();\r\n      let a = moves[Math.floor(Math.random() * moves.length)];\r\n      cur_board = cur_board.doMove(a);\r\n    }\r\n    return cur_board.checkDone();\r\n  }\r\n\r\n  bestChild = (c_param=C) => {\r\n    let best_child, max_val = -Infinity;\r\n    for(const c of this.children) {\r\n      let a = c.q / (c.n || 1);\r\n      let b = c_param * Math.sqrt(Math.log(this.n) / ((c.n) || 1));\r\n      let val = a + b;\r\n      if(val > max_val) {\r\n        max_val = val;\r\n        best_child = c;\r\n      }\r\n    }\r\n    return best_child;\r\n  }\r\n\r\n  expand = () => {\r\n    let a = this.moves_left.pop();\r\n    let new_board = this.board.doMove(a);\r\n    let new_node = new Node(new_board, this);\r\n    this.children.push(new_node);\r\n    return new_node;\r\n  }\r\n\r\n  backprop = (res) => {\r\n    ++this.n;\r\n    ++this.results[res];\r\n    if(this.parent !== null)\r\n      this.parent.backprop(res);\r\n  }\r\n\r\n  getProbs = () => {\r\n    let probs = [];\r\n    for(const c of this.children) {\r\n      probs.push(c.q / (c.n || 1));\r\n    }\r\n    return probs;\r\n  }\r\n}\r\n\r\nexport default Node;","function treePolicy(root) {\r\n  let cur_node = root;\r\n  while(!cur_node.is_terminal_node()) {\r\n    if(!cur_node.is_fully_expanded())\r\n      return cur_node.expand();\r\n    cur_node = cur_node.bestChild();\r\n  }\r\n  return cur_node;\r\n}\r\n\r\nfunction mcts(root, n_simulations) {\r\n  while(n_simulations--) {\r\n    let v = treePolicy(root);\r\n    let res = v.rollout();\r\n    v.backprop(res);\r\n  }\r\n  return root.bestChild(0);\r\n}\r\n\r\nexport default mcts;\r\n","import React, { Component } from \"react\";\r\nimport Box from \"./Box\";\r\nimport { Y, R } from \"../mcts/constants.json\";\r\nimport Connect4Board from \"../Connect4Board\";\r\nimport Node from \"../mcts/Node\";\r\nimport mcts from \"../mcts/mcts\";\r\n\r\nclass Board extends Component {\r\n  state = {\r\n    board: new Connect4Board(),\r\n    info: \"\",\r\n    done: false,\r\n    awaiting: false,\r\n  };\r\n  colors = { 1: \"#ff0\", \"-1\": \"#f00\", 0: null };\r\n\r\n  renderBox = (i, j) => {\r\n    return (\r\n      <Box\r\n        color={this.colors[this.state.board.board[i][j]]}\r\n        onClick={() => this.handleClick(j)}\r\n      />\r\n    );\r\n  };\r\n\r\n  renderRow = (i) => {\r\n    const l = [0, 1, 2, 3, 4, 5, 6];\r\n    const row = l.map((j) => {\r\n      return <div key={`${i}${j}`}>{this.renderBox(i, j)}</div>;\r\n    });\r\n    return <div className=\"row\">{row}</div>;\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ done: false, info: \"\" });\r\n    if (Math.random() > 0.5) {\r\n      let board = new Connect4Board(null, R);\r\n      this.setState({\r\n        board: mcts(new Node(board), 2000).board,\r\n        awaiting: true,\r\n      });\r\n      window.setTimeout(() => this.setState({ awaiting: false }), 1000);\r\n    } else {\r\n      this.setState({ board: new Connect4Board(), awaiting: false });\r\n    }\r\n  };\r\n\r\n  updateInfo = (board) => {\r\n    let res = board.checkDone();\r\n    if (res === 0) return false;\r\n    let info;\r\n    if (res === Y) info = \"This can't happen!\";\r\n    else if (res === R) info = \"Better luck next time\";\r\n    else info = \"It is a draw\";\r\n    this.setState({ info, done: true });\r\n    return true;\r\n  };\r\n\r\n  handleClick = (j) => {\r\n    let { done, awaiting, board } = this.state;\r\n    if (done || awaiting || board.board[0][j] !== 0) return;\r\n\r\n    board = board.doMove(j);\r\n    this.setState({ board, awaiting: true });\r\n\r\n    window.setTimeout(() => {\r\n      let res = this.updateInfo(board);\r\n      if (res) return;\r\n\r\n      board = mcts(new Node(board), 2000).board;\r\n      this.setState({ board });\r\n\r\n      window.setTimeout(() => {\r\n        res = this.updateInfo(board);\r\n        if (res) return;\r\n        this.setState({ awaiting: false });\r\n      }, 1000);\r\n    }, 1000);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\r\n        <div id=\"board\">\r\n          {this.renderRow(0)}\r\n          {this.renderRow(1)}\r\n          {this.renderRow(2)}\r\n          {this.renderRow(3)}\r\n          {this.renderRow(4)}\r\n          {this.renderRow(5)}\r\n        </div>\r\n        <p id=\"info\">{this.state.info}</p>\r\n        <button id=\"reset-btn\" onClick={this.reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react'\r\n\r\nexport default function RulesAndAbout() {\r\n  return (\r\n    <div>\r\n      <h2>Rules</h2>\r\n      <p><p style={{fontWeight: 'bold'}}>Rules of the game: </p>Connect Four (also known as Four Up, Plot Four, Find Four, Four in a Row, Drop Four, and Gravitrips in the Soviet Union) is a two-player connection board game, in which the players choose a color and then take turns dropping colored discs into a seven-column, six-row vertically suspended grid. The pieces fall straight down, occupying the lowest available space within the column. The objective of the game is to be the first to form a horizontal, vertical, or diagonal line of four of one's own discs.</p>\r\n      <p><p style={{fontWeight: 'bold'}}>How to play: </p>When you click on any cell on the board a yellow coin is dropped in the column in which the cell is present and then the AI who is using red coins does its move.</p>\r\n    \r\n      <h2>About</h2>\r\n      <p>\r\n      Algorithm used for the AI: <a href=\"https://towardsdatascience.com/monte-carlo-tree-search-158a917a8baa\">https://towardsdatascience.com/monte-carlo-tree-search-158a917a8baa</a><br/>\r\n      Source code: <a href=\"https://github.com/LazyCoder16/connect4-react-mcts\">https://github.com/LazyCoder16/connect4-react-mcts</a><br/>\r\n      Project by Abhishek Jain\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport Navbar from './components/Navbar';\nimport Board from './components/Board';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport RulesAndAbout from './components/RulesAndAbout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Navbar />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={Board}/>\n            <Route exact path=\"/rules-and-about\" component={RulesAndAbout}/>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}